NAME
git-config - Get and set repository or global options



SYNOPSIS
git config [<file-option>] [--type=<type>] [--fixed-value] [--show-origin] [--show-scope] [-z|--null] name [value [value-pattern]]
git config [<file-option>] [--type=<type>] --add name value
git config [<file-option>] [--type=<type>] [--fixed-value] --replace-all name value [value-pattern]
git config [<file-option>] [--type=<type>] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] --get name [value-pattern]
git config [<file-option>] [--type=<type>] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] --get-all name [value-pattern]
git config [<file-option>] [--type=<type>] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] [--name-only] --get-regexp name_regex [value-pattern]
git config [<file-option>] [--type=<type>] [-z|--null] --get-urlmatch name URL
git config [<file-option>] [--fixed-value] --unset name [value-pattern]
git config [<file-option>] [--fixed-value] --unset-all name [value-pattern]
git config [<file-option>] --rename-section old_name new_name
git config [<file-option>] --remove-section name
git config [<file-option>] [--show-origin] [--show-scope] [-z|--null] [--name-only] -l | --list
git config [<file-option>] --get-color name [default]
git config [<file-option>] --get-colorbool name [stdout-is-tty]
git config [<file-option>] -e | --edit
DESCRIPTION
You can query/set/replace/unset options with this command. The name is actually the section and the key separated by a dot, and the value will be escaped.

Multiple lines can be added to an option by using the --add option. If you want to update or unset an option which can occur on multiple lines, a value-pattern (which is an extended regular expression, unless the --fixed-value option is given) needs to be given. Only the existing values that match the pattern are updated or unset. If you want to handle the lines that do not match the pattern, just prepend a single exclamation mark in front (see also EXAMPLES), but note that this only works when the --fixed-value option is not in use.

The --type=<type> option instructs git config to ensure that incoming and outgoing values are canonicalize-able under the given <type>. If no --type=<type> is given, no canonicalization will be performed. Callers may unset an existing --type specifier with --no-type.

When reading, the values are read from the system, global and repository local configuration files by default, and options --system, --global, --local, --worktree and --file <filename> can be used to tell the command to read from only that location (see FILES).

When writing, the new value is written to the repository local configuration file by default, and options --system, --global, --worktree, --file <filename> can be used to tell the command to write to that location (you can say --local but that is the default).

This command will fail with non-zero status upon error. Some exit codes are:

The section or key is invalid (ret=1),

no section or name was provided (ret=2),

the config file is invalid (ret=3),

the config file cannot be written (ret=4),

you try to unset an option which does not exist (ret=5),

you try to unset/set an option for which multiple lines match (ret=5), or

you try to use an invalid regexp (ret=6).

On success, the command returns the exit code 0.

OPTIONS
--replace-all
Default behavior is to replace at most one line. This replaces all lines matching the key (and optionally the value-pattern).

--add
Adds a new line to the option without altering any existing values. This is the same as providing ^$ as the value-pattern in --replace-all.

--get
Get the value for a given key (optionally filtered by a regex matching the value). Returns error code 1 if the key was not found and the last value if multiple key values were found.

--get-all
Like get, but returns all values for a multi-valued key.


git remote : liste ts les serveurs créés 


les COMMIT:
git add 
git status
ls : pour voir la liste ou on est

git add.


git merge avec github 



LES BRANCHES: pour bosser a +sieurs
git branch name_branch : pour créer sa branche 

git checkout : pour aller sur branch externe

git add. 
:examine le répertoire de travail et cherche les fichiers qui ont été modifiés 
ainsi que ceux qui ont été ajoutés. 
Les fichiers qui ont été supprimés ne sont pas pris en compte


git clone https://github.com/Djeg/TestGitGithub name_doss  : pour cloner ds un repertoire voulu sur desktop

echo "# book-api" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/kpuuuuuuuuuuuuuuuuuuuuu/book-api.git
git push -u origin main
…or push an existing repository from the command line
git remote add origin https://github.com/kpuuuuuuuuuuuuuuuuuuuuu/book-api.git
git branch -M main
git push -u origin main

git config --global user.email "capucinemoll@hotmail.com"


commiter 
git add .
git commit -m "maj"
git push origin master